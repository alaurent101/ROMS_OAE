!  Simple BGC Model Parameters.
!
!svn $Id$
!========================================================= Hernan G. Arango ===
!  Copyright (c) 2002-2021 The ROMS/TOMS Group                                !
!    Licensed under a MIT/X style license                                     !
!    See License_ROMS.txt                                                     !
!==============================================================================
!                                                                             !
! Input parameters can be entered in ANY order, provided that the parameter   !
! KEYWORD (usually, upper case) is typed correctly followed by "="  or "=="   !
! symbols. Any comment lines are allowed and must begin with an exclamation   !
! mark (!) in column one.  Comments may  appear to the right of a parameter   !
! specification to improve documentation.  Comments will be ignored  during   !
! reading.  Blank lines are also allowed and ignored. Continuation lines in   !
! a parameter specification are allowed and must be preceded by a backslash   !
! (\).  In some instances, more than one value is required for a parameter.   !
! If fewer values are provided, the  last value  is assigned for the entire   !
! parameter array.  The multiplication symbol (*),  without blank spaces in   !
! between, is allowed for a parameter specification.  For example, in a two   !
! grids nested application:                                                   !
!                                                                             !
!    AKT_BAK == 2*1.0d-6  2*5.0d-6              ! m2/s                        !
!                                                                             !
! indicates that the first two entries of array AKT_BAK,  in fortran column-  !
! major order, will have the same value of "1.0d-6" for grid 1,  whereas the  !
! next two entries will have the same value of "5.0d-6" for grid 2.           !
!                                                                             !
! In multiple levels of nesting and/or multiple connected domains  step-ups,  !
! "Ngrids" entries are expected for some of these parameters.  In such case,  !
! the order of the entries for a parameter is extremely important.  It  must  !
! follow the same order (1:Ngrids) as in the state variable declaration. The  !
! USER may follow the above guidelines for specifying his/her values.  These  !
! parameters are marked by "==" plural symbol after the KEYWORD.              !
!                                                                             !
!==============================================================================
!
! NOTICE: Input parameter units are specified within brackets and default
! ******  values are specified within braces.
!
! Switch to control the computation of biology within nested and/or multiple
! connected grids.

    Lbiology == T

! Maximum number of iterations to achieve convergence of the nonlinear
! solution.

     BioIter == 1

! Water column respiration rate at T = 0 degC [mmol/m3/day].

        WOC0 == 1.30d0
        WOC20 == 1.31349d0 ! outside Halifax Harbour
        WOC30 == 1.39403d0 ! inside Halifax Harbour

! Water column respiration

         WOC == 1.30d0
        WOC2 == 1.19827d0 ! outside Halifax Harbour
        WOC3 == 1.30d0    ! inside Halifax Harbour

! Sediment oxygen consumption [mmol/m2/day].

         SOC == 16.1d0

! Phytoplankton Nitrogen:Carbon ratio [mole_N/mole_C]

       PhyNC == 0.1509434d0

! CO2 partial pressure in the air (parts per million by volume),
! {377.0d0}. 422.79 is the global average for 2024 from
! https://www.esrl.noaa.gov/gmd/webdata/ccgg/trends/co2/co2_annmean_gl.txt

     pCO2air == 422.79d0

! ratio between particulate and dissolved phases

    P2Dratio == 0.65d0

! dissolution rate of particles [1/day]

     dissTAp == 0.015d0

! fraction of TAp lost to the sediment

     sedloss == 0.0d0

! Vertical sinking velocity for particles [m/day]

        wTAp ==  5.5d0

! Adding flux for particulate feedstock [unit of particle/m2/day]
! Used only if TALK_FILE undefined 

    alkalinity_load == 86400.0d0  ! equivalent to 1 unit of particle/m2/s in HRM2 model

! Grid points location for adding particles

    iloc_alkalinity == 144
    jloc_alkalinity == 345
    kloc_alkalinity_min == 20   ! minimum vertical layer (0=bottom)
    kloc_alkalinity_max == 40   ! maximum vertical layer (N=surface)

! Starting and ending day for adding particles
! Used only if TALK_FILE undefined

    alkalinity_startload == 15981.50000000
    alkalinity_endload   == 15981.75000000

! Harmonic/biharmonic horizontal diffusion of biological tracer for
! nonlinear model and adjoint-based algorithms: [1:NBT,Ngrids].

        TNU2 == 8*0.0d0                        ! m2/s
        TNU4 == 8*0.0d0                        ! m4/s

     ad_TNU2 == 8*0.0d0                        ! m2/s
     ad_TNU4 == 8*0.0d0                        ! m4/s

! Logical switches (TRUE/FALSE) to increase/decrease horizontal diffusivity
! in specific areas of the application domain (like sponge areas) for the
! desired grid: [Ngrids]

LtracerSponge == 8*F

! Vertical mixing coefficients for biological tracers for nonlinear
! model and basic state scale factor in adjoint-based algorithms:
! [1:NBT,Ngrids].

     AKT_BAK == 8*1.0d-6                       ! m2/s

  ad_AKT_fac == 8*1.0d0                        ! nondimensional

! Nudging/relaxation time scales, inverse scales will be computed
! internally: [1:NBT,Ngrids].

       TNUDG == 8*360d0                        ! days

! Set horizontal and vertical advection schemes for biological tracers.
! A different advection scheme is allowed for each tracer. For example,
! a positive-definite (monotonic) algorithm can be activated for
! salinity and biological tracers, while a different one is set for
! temperature. [1:NAT+NPT,Ngrids] values are expected.
!
!   Keyword    Advection Algorithm
!
!   A4         4th-order Akima (horizontal/vertical)
!   C2         2nd-order centered differences (horizontal/vertical)
!   C4         4th-order centered differences (horizontal/vertical)
!   HSIMT      3th-order HSIMT-TVD (horizontal/vertical)
!   MPDATA     recursive flux corrected MPDATA (horizontal/vertical)
!   SPLINES    parabolic splines (only vertical)
!   SU3        split third-order upstream (horizontal/vertical)
!   U3         3rd-order upstream-biased (only horizontal)
!
! The user has the option of specifying the full Keyword or the first
! two letters, regardless if using uppercase or lowercase. If nested
! grids, specify values for each grid.

   Hadvection == HSIMT    \                     ! idbio( 1), TIC
                 HSIMT    \                     ! idbio( 2), AlK
                 MPDATA   \                     ! idbio( 3), TAp 
                 HSIMT    \                     ! idbio( 4), dTIC
                 HSIMT    \                     ! idbio( 5), dTA
                 HSIMT    \                     ! idbio( 6), TAin
                 HSIMT    \                     ! idbio( 7), TArm
                 HSIMT                          ! idbio( 8), Oxy

   Vadvection == HSIMT    \                     ! idbio( 1), TIC
                 HSIMT    \                     ! idbio( 2), AlK
                 MPDATA   \                     ! idbio( 3), TAp
                 HSIMT    \                     ! idbio( 4), dTIC
                 HSIMT    \                     ! idbio( 5), dTA
                 HSIMT    \                     ! idbio( 6), TAin
                 HSIMT    \                     ! idbio( 7), TArm
                 HSIMT                          ! idbio( 8), Oxy

! Adjoint-based algorithms can have different horizontal and schemes
! for active and inert tracers.

ad_Hadvection == U3                             ! idbio(:), compact

ad_Vadvection == C4                             ! idbio(:), compact

! Set lateral boundary conditions keyword. Notice that a value is expected
! for each boundary segment per nested grid for each state variable.
!
! The biological tracer variables require [1:4,1:NBT,Ngrids] values. The
! boundary order is: 1=west, 2=south, 3=east, and 4=north. That is,
! anticlockwise starting at the western boundary.
!
! The keyword is case insensitive and usually has three characters. However,
! it is possible to have compound keywords, if applicable. For example, the
! keyword "RadNud" implies radiation boundary condition with nudging. This
! combination is usually used in active/passive radiation conditions.
!
! NOTICE: It is possible to specify the lateral boundary conditions for
! ======  all biological tracers in a compact form with a single entry.
! If so, all the biological tracers are assumed to have the same boundary
! condition as in the single entry.
!
!   Keyword    Lateral Boundary Condition Type
!
!   Cla        Clamped                                _____N_____     j=Mm
!   Clo        Closed                                |     4     |
!   Gra        Gradient                              |           |
!   Nes        Nested                              1 W           E 3
!   Nud        Nudging                               |           |
!   Per        Periodic                              |_____S_____|
!   Rad        Radiation                                   2          j=1
!                                                   i=1         i=Lm
!                   W       S       E       N
!                   e       o       a       o
!                   s       u       s       r
!                   t       t       t       t
!                           h               h
!
!                   1       2       3       4

   LBC(isTvar) ==   RadNud  RadNud  RadNud  Clo    \    ! idbio( 1), TIC 
                    RadNud  RadNud  RadNud  Clo    \    ! idbio( 2), Alk
                    Cla     Cla     Cla     Clo    \    ! idbio( 3), TAp
                    Cla     Cla     Cla     Clo    \    ! idbio( 4), dTIC
                    Cla     Cla     Cla     Clo    \    ! idbio( 5), dTA
                    Cla     Cla     Cla     Clo    \    ! idbio( 6), TAin
                    Cla     Cla     Cla     Clo    \    ! idbio( 7), TArm
                    RadNud  RadNud  RadNud  Clo         ! idbio( 8), Oxy

! Adjoint-based algorithms can have different lateral boundary
! conditions keywords.

ad_LBC(isTvar) ==   RadNud  RadNud  RadNud  Clo    \    ! idbio( 1), TIC
                    RadNud  RadNud  RadNud  Clo    \    ! idbio( 2), Alk
                    Cla     Cla     Cla     Clo    \    ! idbio( 3), TAp
                    Cla     Cla     Cla     Clo    \    ! idbio( 4), dTIC
                    Cla     Cla     Cla     Clo    \    ! idbio( 5), dTA
                    Cla     Cla     Cla     Clo    \    ! idbio( 6), TAin
                    Cla     Cla     Cla     Clo    \    ! idbio( 7), TArm
                    RadNud  RadNud  RadNud  Clo         ! idbio( 8), Oxy

! Logical switches (TRUE/FALSE) to activate biological tracers point
! Sources/Sinks (like river runoff) and to specify which tracer variables
! to consider: [NBT,Ngrids] values are expected. See glossary below for
! details.

  LtracerSrc == 8*T

! Logical switches (TRUE/FALSE) to read and process biological tracer
! climatology fields: [NBT,Ngrids] values are expected. See glossary below
! for details.

  LtracerCLM == 8*F

! Logical switches (TRUE/FALSE) to activate nudging of biological tracers
! toward reanalysis fields along the boundaries

  LnudgeTREA == 8*F

! Logical switches (TRUE/FALSE) to nudge the desired biological tracer
! climatology field. If not analytical climatology fields, users need to
! turn on the logical switches above to process the fields from the
! climatology NetCDF file that are needed for nudging; [NBT,Ngrids]
! values are expected. See glossary below for details.

  LnudgeTCLM == 8*F

! Logical switches (TRUE/FALSE) to activate writing of biological fields
! into HISTORY output file: [1:NBT,Ngrids].

Hout(idTvar) == 8*T    ! ..., TIC, ...           biological tracer
Hout(idTsur) == 8*F    ! ..., TIC_sflux, ...     surface tracer flux

! Logical switches (TRUE/FALSE) to activate writing of biological fields
! into QUICKSAVE output file: [1:NBT,Ngrids].

Qout(idTvar) == 8*T   ! ..., TIC, ...           biological tracer
Qout(idsurT) == 8*F   ! ..., TIC_sur, ...       surface biological tracer
Qout(idTsur) == 8*F   ! ..., TIC_sflux, ...     surface tracer flux

! Logical switches (TRUE/FALSE) to activate writing of time-averaged fields
! into AVERAGE output file: [1:NBT,Ngrids].

Aout(idTvar) == 8*T    ! ..., TIC, ...           biological tracer

Aout(idTTav) == 8*F    ! ..., TIC_2, ...         quadratic <t*t> tracer terms
Aout(idUTav) == 8*F    ! ..., u_TIC, ...         quadratic <u*t> tracer terms
Aout(idVTav) == 8*F    ! ..., v_TIC, ...         quadratic <v*t> tracer terms
Aout(iHUTav) == 8*F    ! ..., Huon_TIC, ...      tracer volume flux, <Huon*t>
Aout(iHVTav) == 8*F    ! ..., Hvom_TIC, ...      tracer volume flux, <Hvom*t>

! Logical switches (TRUE/FALSE) to activate writing of time-averaged,
! biological tracer diagnostic terms into DIAGNOSTIC output file:
! [1:NBT,Ngrids].

Dout(iTrate) == 8*T    ! ..., TIC_rate, ...      time rate of change
Dout(iThadv) == 8*T    ! ..., TIC_hadv, ...      horizontal total advection
Dout(iTxadv) == 8*F    ! ..., TIC_xadv, ...      horizontal XI-advection
Dout(iTyadv) == 8*F    ! ..., TIC_yadv, ...      horizontal ETA-advection
Dout(iTvadv) == 8*T    ! ..., TIC_vadv, ...      vertical advection
Dout(iThdif) == 8*T    ! ..., TIC_hdiff, ...     horizontal total diffusion
Dout(iTxdif) == 8*F    ! ..., TIC_xdiff, ...     horizontal XI-diffusion
Dout(iTydif) == 8*F    ! ..., TIC_ydiff, ...     horizontal ETA-diffusion
Dout(iTsdif) == 8*T    ! ..., TIC_sdiff, ...     horizontal S-diffusion
Dout(iTvdif) == 8*T    ! ..., TIC_vdiff, ...     vertical diffusion
Dout(iTnudg) == 8*F    ! ..., TIC_nudg, ...      nudging effect

! Logical switches (TRUE/FALSE) to activate writing of time-averaged,
! biological processes diagnostics terms into DIAGNOSTIC output file [Ngrids].

Dout(iCfxc) == T        ! CO2_airsea         air-sea CO2 flux (control)
Dout(iCfxa) == T        ! CO2_airsea         air-sea CO2 flux (addition)
Dout(ipCO2c) == T       ! pCO2               CO2 partial pressure (control)
Dout(ipCO2a) == T       ! pCO2               CO2 partial pressure (addition)
Dout(iO2fx) == T        ! O2_airsea          air-sea O2 flux

!
!  GLOSSARY:
!  =========
!
!------------------------------------------------------------------------------
! Simple BGC Model Parameters. Currently, it can be configured with 
! 4 biological tracers:
!
! idbio( 1)     TIC               Total inorganic carbon               if CARBON
! idbio( 2)     Alk               Alkalinity                           if CARBON
! idbio( 3)     TAp               Added alkalinity (particulate)       if TALK_ADDITION
! idbio( 4)     dTIC              additional TIC (OAE)                 if TALK_ADDITION
! idbio( 5)     dTA               Additional TA (OAE)                  if TALK_ADDITION
! idbio( 6)     TAin              Added alkalinity (dissolved)         if TALK_TRACERS
! idbio( 7)     TArm              Remineralized particulate alkalinity if TALK_TRACERS
! idbio( 8)     oxygen            Oxygen concentration                 if OXYGEN
!------------------------------------------------------------------------------
!
!  Lbiology       Switch to control the computation of a particular module
!                   within nested and/or multiple connected grids. By default
!                   this switch is set to TRUE in "mod_scalars" for all grids.
!                   Ngrids values are expected. The USER has the option, for
!                   example, to compute the biology in just one of the nested
!                   grids. If so, this switch needs to be consistent with the
!                   dimension parameter NBT in "mod_param".  In order to make
!                   the model more efficient in memory usage, NBT(:) should
!                   be zero in such grids.
!
!  BioIter        Maximum number of iterations to achieve convergence of
!                   the nonlinear solution.
!
!
!  WOC0           Water column respiration rate at T=0C [mmol/m^3/day].
!
!  WOC            Water column respiration rate [mmol/m^3/day].
!
!  SOC            Sediment oxygen consumption [mmol/m^2/day].
!
!  pCO2air        CO2 partial pressure in the air (parts per million by
!                   volume).
!
!------------------------------------------------------------------------------
! Physical parameters. This file is configured for NBT=12.
!------------------------------------------------------------------------------
!
!  TNU2           Nonlinear model lateral, harmonic, constant, mixing
!                   coefficient (m2/s) for biological tracer variables;
!                   [1:NBT,1:Ngrids] values are expected. If variable
!                   horizontal diffusion is activated, TNU2 is the mixing
!                   coefficient for the largest grid-cell in the domain.
!
!  TNU4           Nonlinear model lateral, biharmonic, constant, mixing
!                   coefficient (m4/s) for biological tracer variables;
!                   [1:NBT,1:Ngrids] values are expected. If variable
!                   horizontal diffusion is activated, TNU4 is the mixing
!                   coefficient for the largest grid-cell in the domain.
!
!  ad_TNU2        Adjoint-based algorithms lateral, harmonic, constant,
!                   mixing coefficient (m2/s) for biological tracer variables;
!                   [1:NBT,1:Ngrids] values are expected. If variable
!                   horizontal diffusion is activated, ad_TNU2 is the mixing
!                   coefficient for the largest grid-cell in the domain.
!
!  ad_TNU4        Adjoint-based algorithms lateral, biharmonic, constant,
!                   mixing coefficient (m4/s) for biological tracer variables;
!                   [1:NBT,1:Ngrids] values are expected. If variable
!                   horizontal diffusion is activated, ad_TNU4 is the mixing
!                   coefficient for the largest grid-cell in the domain.
!
!  LtracerSponge  Logical switches (TRUE/FALSE) to increase/decrease horizontal
!                   diffusivity of biological tracers in specific areas of the
!                   domain. It can be used to specify sponge areas with larger
!                   horizontal mixing coefficients for damping of high
!                   frequency noise due to open boundary conditions or nesting.
!                   The CPP option SPONGE is now deprecated and replaced with
!                   this switch to facilitate or not sponge areas over a
!                   particular nested grid; [1:NBT,1:Ngrids] values are
!                   expected.
!
!                   The horizontal mixing distribution is specified in
!                   "ini_hmixcoef.F" as:
!
!                     diff2(i,j,itrc) = diff_factor(i,j) * diff2(i,j,itrc)
!                     diff4(i,j,itrc) = diff_factor(i,j) * diff4(i,j,itrc)
!
!                   The variable "diff_factor" can be read from the grid
!                   NetCDF file. Alternately, the horizontal diffusion in the
!                   sponge area can be set-up with analytical functions in
!                   "ana_sponge.h" using CPP ANA_SPONGE when these switches
!                   are turned ON for a particular grid.
!
!  AKT_BAK        Background vertical mixing coefficient (m2/s) for biological
!                   tracer variables, [1:NBT,1:Ngrids] values are expected.
!
!
!  ad_AKT_fac     Adjoint-based algorithms vertical mixing, basic state,
!                   scale factor (nondimensional) for biological tracer
!                   variables; [1:NBT,1:Ngrids] values are expected. In
!                   some applications, a smaller/larger values of vertical
!                   mixing are necessary for stability. It is only used
!                   when FORWARD_MIXING is activated.
!
!  TNUDG          Nudging time scale (days), [1:NBT,1:Ngrids].  Inverse scale
!                   will be computed internally.
!
!------------------------------------------------------------------------------
! Tracer advection scheme.
!------------------------------------------------------------------------------
!
! It is more advantageous to set the horizontal and vertical advection schemes
! for each tracer with switches instead of a single CPP flag for all of them.
! Positive-definite and monotonic algorithms (i.e., MPDATA and HSIMT) are
! appropriate and useful for positive fields like salinity, inert, biological,
! and sediment tracers.  However, since the temperature has a dynamic range
! with negative and positive values in the ocean, other advection schemes are
! more appropriate.
!
! Currently, the following tracer advection schemes are available and are
! activated using the associated Keyword:
!
!   Keyword    Advection Algorithm
!
!   A4         4th-order Akima (horizontal/vertical)
!   C2         2nd-order centered differences (horizontal/vertical)
!   C4         4th-order centered differences (horizontal/vertical)
!   HSIMT      3th-order HSIMT with TVD limiter (horizontal/vertical)
!   MPDATA     recursive flux corrected MPDATA (horizontal/vertical)
!   SPLINES    parabolic splines reconstruction (only vertical)
!   SU3        split third-order upstream (horizontal/vertical)
!   U3         3rd-order upstresm-bias (only horizontal)
!
! The user has the option of specifying the full Keyword or the first
! two letters, regardless if using uppercase or lowercase.
!
! If using either HSIMT (Wu and Zhu, 2010) or MPDATA (Margolin and
! Smolarkiewicz, 1998) options, the user needs to set the same scheme
! for both horizontal and vertical advection to preserve monotonicity.
!
! Hadvection     Horizontal advection for each active (temperature and
!                  salinity) and inert tracers, [1:NAT+NPT,Ngrids]
!                  values are expected.
!
! Vadvection     Vertical advection for each active (temperature and
!                  salinity) and inert tracers, [1:NAT+NPT,Ngrids]
!                  values are expected.
!
! ad_Hadvection  Horizontal advection for each active (temperature and
!                  salinity) and inert tracers in the adjoint-based
!                  algorithms, [1:NAT+NPT,Ngrids] values are expected.
!
! ad_Vadvection  Vertical advection for each active (temperature and
!                  salinity) and inert tracers in the adjoint-based
!                  algorithms, [1:NAT+NPT,Ngrids] values are expected.
!
! Examples:
!
!  Hadvection == A4       \                     ! temperature
!                MPDATA   \                     ! salinity
!                HSIMT    \                     ! dye_01, inert(1)
!                HSIMT                          ! dy2_02, inert(2)
!
!  Vadvection == A4       \                     ! temperature
!                MPDATA   \                     ! salinity
!                HSIMT    \                     ! dye_01, inert(1)
!                HSIMT                          ! dye_02, inert(2)
!
! or in nested applications
!
!  Hadvection == U3       \                     ! temperature, Grid 1
!                HSIMT    \                     ! salinity,    Grid 1
!                U3       \                     ! temperature, Grid 2
!                HSIMT    \                     ! salinity,    Grid 2
!                U3       \                     ! temperature, Grid 3
!                HSIMT                          ! salinity,    Grid 3
!
!  Vadvection == C4       \                     ! temperature, Grid 1
!                HSIMT    \                     ! salinity,    Grid 1
!                C4       \                     ! temperature, Grid 2
!                HSIMT    \                     ! salinity,    Grid 2
!                C4       \                     ! temperature, Grid 3
!                HSIMT                          ! salinity,    Grid 3
!
! It is convinient to use the compact specification format for biological and
! sediment passive tracers as:
!
!  Hadvection == HSIMT                          ! idbio(:), compact
!
!  Vadvection == HSIMT                          ! idbio(:), compact
!
! when all the passive tracers have the same horizontal and vertical tracer
! advection scheme.
!
!------------------------------------------------------------------------------
! Lateral boundary conditions parameters.
!------------------------------------------------------------------------------
!
! The lateral boundary conditions are now specified with logical switches
! instead of CPP flags to allow nested grid configurations. Their values are
! load into structured array:
!
!    LBC(1:4, nLBCvar, Ngrids)
!
! where 1:4 are the number of boundary edges, nLBCvar are the number LBC state
! variables, and Ngrids is the number of nested grids. For Example, to apply
! gradient boundary conditions to any tracer we use:
!
!    LBC(iwest,  isTvar(itrc), ng) % gradient
!    LBC(ieast,  isTvar(itrc), ng) % gradient
!    LBC(isouth, isTvar(itrc), ng) % gradient
!    LBC(inorth, isTvar(itrc), ng) % gradient
!
! The lateral boundary conditions for biological tracers are entered with
! a keyword. This keyword is case insensitive and usually has three characters.
! However, it is possible to have compound keywords, if applicable. For example,
! the keyword "RadNud" implies radiation boundary condition with nudging. This
! combination is usually used in active/passive radiation conditions.
!
! It is possible to specify the lateral boundary conditions for all biological
! tracers in a compact form with a single entry.  For example, in a East-West
! periodic application we can just have:
!
!                   W       S       E       N
!                   e       o       a       o
!                   s       u       s       r
!                   t       t       t       t
!                           h               h
!
!                   1       2       3       4
!
!  LBC(isTvar) ==   Per     Clo     Per     Clo
!
! Then, the standard input processing routine will assume that all the
! biological tracers have the same lateral boundary condition specified by
! the single entry.
!
!   Keyword    Lateral Boundary Condition Type
!
!   Cla        Clamped                                _____N_____     j=Mm
!   Clo        Closed                                |     4     |
!   Gra        Gradient                              |           |
!   Nes        Nested                              1 W           E 3
!   Nud        Nudging                               |           |
!   Per        Periodic                              |_____S_____|
!   Rad        Radiation                                   2          j=1
!                                                   i=1         i=Lm
!
!  LBC(isTvar)    Biological Tracers, [1:4, 1:NBT, Ngrids] values are expected.
!
! Similarly, the adjoint-based algorithms (ADM, TLM, RPM) can have different
! lateral boundary conditions keywords:
!
!  ad_LBC(isTvar) Biological Tracers, [1:4, 1:NBT, Ngrids] values are expected.
!
!------------------------------------------------------------------------------
!  Tracer point Sources/Sink sources switches: [1:NBT,1:Ngrids].
!------------------------------------------------------------------------------
!
!  LtracerSrc     Logical switches (T/F) to activate biological tracer
!                   variables point Sources/Sinks.
!
!                     LtracerSrc(idbio(1),ng)    Total inorganic carbon
!                     LtracerSrc(idbio(2),ng)    Alkalinity
!                     LtracerSrc(idbio(3),ng)    Oxygen concentration
!
!                   Recall that these switches are usually activated to add
!                   river runoff as a point source. At minimum, it is necessary
!                   to specify both temperature and salinity for all rivers.
!                   The other tracers are optional. The user needs to know the
!                   correspondence between biological variables and indices
!                   idbio(1:NBT) when activating one or more of these switches.
!
!                   These logical switches REPLACES and ELIMINATES the need to
!                   have or read the variable "river_flag(river)" in the input
!                   rivers forcing NetCDF file:
!
!                     double river_flag(river)
!                        river_flag:long_name = "river runoff tracer flag"
!                        river_flag:option_0 = "all tracers are off"
!                        river_flag:option_1 = "only temperature"
!                        river_flag:option_2 = "only salinity"
!                        river_flag:option_3 = "both temperature and salinity"
!                        river_flag:units = "nondimensional"
!
!                   This logic was too cumbersome and complicated when
!                   additional tracers are considered. However, this change
!                   is backward compatible.
!
!                   The LtracerSrc switch will be used to activate the reading
!                   of respective tracer variable from input river forcing
!                   NetCDF file. If you want to add other tracer variables
!                   (other than temperature and salinity) as a source for a
!                   particular river(s), you just need to specify such values
!                   on those river(s). Then, set the values to ZERO on the
!                   other river(s) that do NOT require such river forcing for
!                   that tracer. Recall that you need to specify the tracer
!                   values for all rivers, even if their values are zero.
!
!------------------------------------------------------------------------------
!  Tracer climatology processing switches: [1:NBT,1:Ngrids].
!------------------------------------------------------------------------------
!
!  LtracerCLM     Logical switches (T/F) to process biological tracer variables
!                   climatology.  The CPP option TCLIMATOLOGY is now obsolete
!                   and replaced with these switches to facilitate nesting
!                   applications. Currently, the CLIMA(ng)%tclm is used for
!                   horizontal mixing, sponges, and nudging.
!
!                     LtracerCLM(idbio(1),ng)    Total inorganic carbon
!                     LtracerCLM(idbio(2),ng)    Alkalinity
!                     LtracerCLM(idbio(3),ng)    Oxygen concentration
!
!                   These switches also controls which climatology tracer
!                   fields needs to be processed.  So we may reduce the
!                   memory allocation for the CLIMA(ng)%tclm array.
!
!------------------------------------------------------------------------------
!  Logical switches for nudging to climatology: [1:NBT,1:Ngrids].
!------------------------------------------------------------------------------
!
!  LnudgeTCLM     Logical switches (T/F) to activate the nugding of biological
!                   tracer variables climatology. These switches also control
!                   which biological tracer variables to nudge. The CPP option
!                   TCLM_NUDGING is now obsolete and replaced with these
!                   switches to facilitate nesting.
!
!                     LtracerTCLM(idbio(1),ng)    Total inorganic carbon
!                     LtracerTCLM(idbio(2),ng)    Alkalinity
!                     LtracerTCLM(idbio(3),ng)    Oxygen concentration
!
!                   User also needs to TURN ON the respective logical switches
!                   "LtracerCLM", described above, to process the required 3D
!                   biological tracer climatology data. This data can be set
!                   with analytical functions (ANA_TCLIMA) or read from input
!                   climatology NetCDF file(s).
!
!                   The nudging coefficients CLIMA(ng)%Tnudgcof can be set
!                   with analytical functions in "ana_nudgcoef.h"  using CPP
!                   option ANA_NUDGCOEF.  Otherwise, it will be read from
!                   NetCDF file NUDNAME.
!
!------------------------------------------------------------------------------
! Logical switches (T/F) to activate writing of fields into HISTORY file.
!------------------------------------------------------------------------------
!
!  Hout           Logical switches to write out biological fields into
!                   output HISTORY NetCDF file, [1:NBT,1:Ngrids] values
!                   are expected:
!
!                   Hout(idTvar)               biological tracers
!                   Hout(idTsur)               biological tracers surface flux
!
!                   idTvar(idbio(1))=iTIC_      Total inorganic carbon
!                   idTvar(idbio(2))=iTAlk      Alkalinity
!                   idTvar(idbio(3))=iTAp        Particulate feedstock
!                   idTvar(idbio(4))=idTIC      Added Total inorganic carbon
!                   idTvar(idbio(5))=idTA       Added Alkalinity (total)
!                   idTvar(idbio(6))=iTAin      Added Alkalinity (dissolved)
!                   idTvar(idbio(7))=iTArm      Added Alkalinity (remineralized from particle)
!                   idTvar(idbio(8))=iOxyg      Oxygen concentration
!
!------------------------------------------------------------------------------
! Logical switches (T/F) to activate writing of fields into QUICKSAVE file.
!------------------------------------------------------------------------------
!
!  Qout             Logical switches to write out biological fields into
!                     output QUICKSAVE NetCDF file, [1:NBT,1:Ngrids] values
!                     are expected:
!
!                     Qout(idTvar)      biological tracers
!                     Qout(idsurT)      surface biological tracers
!                     Qout(idTsur)      biological tracers surface flux
!
!                     The idTvar(idbio(:)), idsurR(idbio(:)), and
!                     idTsur(idbio(:)) indices are provided above.
!
!------------------------------------------------------------------------------
! Logical switches (T/F) to activate writing of fields into AVERAGE file.
!------------------------------------------------------------------------------
!
!  Aout           Logical switches to write out biological fields into
!                   output AVERAGE NetCDF file, [1:NBT,1:Ngrids] values
!                   are expected:
!
!                   Aout(idTvar)               biological tracers
!
!                   Aout(idTTav)               quadratic <t*t> tracers terms
!                   Aout(idUTav)               quadratic <u*t> tracers terms
!                   Aout(idVTav)               quadratic <v*t> tracers terms
!                   Aout(iHUTav)               tracer u-volume flux, <Huon*t>
!                   Aout(iHVTav)               tracer v-volume flux, <Hvom*t>
!
!                   The idTvar(idbio(:)) are the same to those in the HISTORY
!                   file.
!
!------------------------------------------------------------------------------
! Logical switches (T/F) to activate writing of time-averaged fields into
! DIAGNOSTIC file.
!------------------------------------------------------------------------------
!
!  Time-averaged, biological tracers  diagnostic terms, [1:NBT,Ngrids] values
!  expected: (if DIAGNOSTICS_TS)
!
!                 Dout(idDtrc(idbio(1:NBT),iT....),1:Ngrids)
!
!  Dout(iTrate)   Write out time rate of change.
!  Dout(iThadv)   Write out horizontal total advection.
!  Dout(iTxadv)   Write out horizontal  XI-advection.
!  Dout(iTyadv)   Write out horizontal ETA-advection.
!  Dout(iTvadv)   Write out vertical advection.
!  Dout(iThdif)   Write out horizontal total diffusion, if TS_DIF2 or TS_DIF4.
!  Dout(iTxdif)   Write out horizonta1  XI-diffusion, if TS_DIF2 or TS_DIF4.
!  Dout(iTydif)   Write out horizontal ETA-diffusion, if TS_DIF2 or TS_DIF4.
!  Dout(iTsdif)   Write out horizontal   S-diffusion, if TS_DIF2 or TS_DIF4 and
!                   rotated tensor (MIX_GEO_TS or MIX_ISO_TS).
!  Dout(iTvdif)   Write out vertical diffusion.
!  Dout(iTnudg)   Write out nudging effect.
!
!
!  Time-accumulated biological processes diagnostics fields, [Ngrids] values
!  are expected:
!
!  Dout(iCfxc)    Write out air-sea CO2 flux (control).
!  Dout(iCfxa)    Write out air-sea CO2 flux (addition).
!  Dout(ipCO2c)   Write out CO2 partial pressure (control).
!  Dout(ipCO2a)   Write out CO2 partial pressure (addition).
!  Dout(iO2fx)    Write out air-sea O2 flux.
!  Dout(iPPro)    Write out primary production.
!
